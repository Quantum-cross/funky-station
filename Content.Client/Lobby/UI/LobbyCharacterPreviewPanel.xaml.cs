// SPDX-FileCopyrightText: 2024 Piras314 <p1r4s@proton.me>
// SPDX-FileCopyrightText: 2024 Tadeo <td12233a@gmail.com>
// SPDX-FileCopyrightText: 2024 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 taydeo <td12233a@gmail.com>
//
// SPDX-License-Identifier: MIT

using System.Linq;
using System.Numerics;
using Content.Client.Lobby.UI.ProfileEditorControls;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;

namespace Content.Client.Lobby.UI;

[GenerateTypedNameReferences]
public sealed partial class LobbyCharacterPreviewPanel : Control
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IClientPreferencesManager _preferences = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly JobRequirementsManager _requirements = default!;
    [Dependency] private readonly ISharedPlayerManager _playerManager = default!;
    [Dependency] private readonly IUserInterfaceManager _uiManager = default!;

    private SpriteSystem _sprite = default!;

    public Button CharacterSetupButton => CharacterSetup;

    private EntityUid? _previewDummy;

    public DraggableJobTarget GetTargetControl(JobPriority prio)
    {
        return FindControl<DraggableJobTarget>($"{prio.ToString()}Box");
    }


    public LobbyCharacterPreviewPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _prototypeManager.PrototypesReloaded += OnPrototypesReloaded;

        DraggableJobTarget.UpdatedOrderedJobs(_prototypeManager);

        GetTargetControl(JobPriority.High).SetFallbackTarget(GetTargetControl(JobPriority.Medium));
    }

    private void OnPrototypesReloaded(PrototypesReloadedEventArgs args)
    {
        if (args.WasModified<JobPrototype>() || args.WasModified<DepartmentPrototype>())
        {
            DraggableJobTarget.UpdatedOrderedJobs(_prototypeManager);
            Refresh();
        }
    }

    public void SetLoaded(bool value)
    {
        Loaded.Visible = value;
        Unloaded.Visible = !value;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        _entManager.DeleteEntity(_previewDummy);
        _previewDummy = null;
    }

    /// <summary>
    /// Refresh the selected character summary
    /// </summary>
    public void Refresh()
    {
        foreach (var prio in Enum.GetValues<JobPriority>())
        {
            GetTargetControl(prio).ClearIcons();
        }

        if(_preferences.Preferences is not {} prefs)
            return;

        _sprite = _entManager.System<SpriteSystem>();

        var priorities = prefs.JobPriorities;

        // Create the job icons in order
        foreach (var job in DraggableJobTarget.OrderedJobs)
        {
            if (!job.SetPreference)
                continue;
            if (!_requirements.IsAllowed(job, null, out _))
                continue;

            var prio = priorities.GetValueOrDefault(job, JobPriority.Never);

            var atLeastOneEnabled = prefs.GetAllEnabledProfilesForJob(job).Count != 0;
            var icon = new DraggableJobIcon(job,
                _ => CreateJobTooltip(job));

            if(!atLeastOneEnabled)
                icon.Modulate = Color.Salmon;

            var jobIcon = _prototypeManager.Index(job.Icon);
            icon.Texture = _sprite.Frame0(jobIcon.Icon);

            foreach (var targetControl in Enum.GetValues<JobPriority>().Select(GetTargetControl))
            {
                targetControl.RegisterJobIcon(icon);
            }

            icon.OnPriorityChanged += SendUpdatedPriorities;

            GetTargetControl(prio).AddJobIcon(icon, preOrdered: true);
        }
    }

    private void SendUpdatedPriorities()
    {
        _preferences.UpdateJobPriorities(GetJobPriorities());
    }

    public Dictionary<ProtoId<JobPrototype>, JobPriority> GetJobPriorities()
    {
        var result = new Dictionary<ProtoId<JobPrototype>, JobPriority>();

        foreach (var prio in Enum.GetValues<JobPriority>())
        {
            if (prio == JobPriority.Never)
                continue;

            foreach (var job in GetTargetControl(prio).GetContainedJobs())
            {
                result.Add(job, prio);
            }
        }

        return result;
    }

    private Tooltip? CreateJobTooltip(JobPrototype job)
    {
        if(_preferences.Preferences is not {} prefs)
            return null;

        var tooltip = new Tooltip();

        var content = tooltip.GetChild(0);
        content.RemoveAllChildren();

        var title = new Label();
        title.AddStyleClass("LabelHeading");
        title.Text = job.LocalizedName;
        title.HorizontalAlignment = HAlignment.Center;

        content.AddChild(title);

        var grid = new GridContainer()
        {
            MaxGridHeight = _uiManager.PopupRoot.Height * 0.99f,
            Margin = new Thickness(6),
        };

        content.AddChild(grid);

        var profiles = prefs.GetAllProfilesForJob(job);

        if (profiles.Count == 0)
        {
            var label = new Label
            {
                Text = Loc.GetString("lobby-character-preview-panel-tooltip-no-profiles-for-job",
                    ("job", job.LocalizedName)),
                Align = Label.AlignMode.Center,
            };
            grid.AddChild(label);
            return tooltip;
        }

        foreach (var profile in profiles.Values)
        {
            var profilePreview = new ProfilePreviewSpriteView()
            {
                SetSize = new Vector2(64),
                Scale = new Vector2(2),
                HorizontalAlignment = HAlignment.Right,
            };
            if(!profile.Enabled)
                profilePreview.Modulate = Color.Salmon;
            profilePreview.Initialize(_preferences, _prototypeManager, _playerManager);
            profilePreview.LoadPreview(profile, job);

            var description = profilePreview.ProfileName;
            if (profilePreview.LoadoutName != null)
                description = $"{description}\n\"{profilePreview.LoadoutName}\"";
            if (!profile.Enabled)
                description += $"\n{Loc.GetString("character-setup-gui-character-picker-button-disabled-button")}";

            var label = new Label
            {
                Text = description,
                Align = Label.AlignMode.Right,
                HorizontalAlignment = HAlignment.Right,
                HorizontalExpand = true,
                Margin = new Thickness(0, 0, 10, 0),
            };

            var profileContainer = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal,
            };
            profileContainer.AddChild(label);
            profileContainer.AddChild(profilePreview);

            grid.AddChild(profileContainer);
        }

        return tooltip;
    }
}
